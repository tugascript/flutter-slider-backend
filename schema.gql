# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Record {
  id: Int!
  createdAt: String!
  updatedAt: String!
  level: Int!
  moves: Int!
  time: Int!
  owner: User!
}

type User {
  id: Int!
  createdAt: String!
  updatedAt: String!
  username: String!
  email: String
  picture: String
  maxLevel: Int!
  lastLogin: String!
  lastOnline: String!
  records(level: Int!, first: Int = 10, order: QueryOrder = ASC): PaginatedRecords!
}

enum QueryOrder {
  ASC
  DESC
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
}

type RecordEntityPageEdge {
  cursor: String!
  node: Record!
}

type PaginatedRecords {
  totalCount: Int!
  edges: [RecordEntityPageEdge!]!
  pageInfo: PageInfo!
}

type UserEntityPageEdge {
  cursor: String!
  node: User!
}

type PaginatedUsers {
  totalCount: Int!
  edges: [UserEntityPageEdge!]!
  pageInfo: PageInfo!
}

type Message {
  id: ID!
  message: String!
}

type Image {
  id: Int!
  createdAt: String!
  updatedAt: String!
  url: String!
}

type ImageEntityPageEdge {
  cursor: String!
  node: Image!
}

type PaginatedImages {
  totalCount: Int!
  edges: [ImageEntityPageEdge!]!
  pageInfo: PageInfo!
}

type Query {
  me: User!
  getUser(username: String!): User!
  getUsers(after: String, first: Int = 10, search: String, cursor: UsersCursor = DATE, order: QueryOrder = DESC): PaginatedUsers!
  getRecords(after: String, first: Int = 10, userId: Int!, level: Int!, order: QueryOrder = ASC): PaginatedRecords!
  getHighScores(after: String, first: Int = 10, level: Int!): PaginatedRecords!
  getImages(after: String, first: Int = 10): PaginatedImages!
}

enum UsersCursor {
  DATE
  ALPHABET
}

type Mutation {
  updateProfilePicture(picture: Upload!): User!
  addRecord(input: RecordInput!): Record!
  addImage(image: Upload!): Image!
  deleteImage(imageId: Int!): Message!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input RecordInput {
  level: Int!
  moves: Int!
  time: Int!
}