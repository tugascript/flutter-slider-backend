# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: Int!
  createdAt: String!
  updatedAt: String!
  username: String!
  email: String
  picture: String
  maxLevel: Int!
  lastLogin: String!
  lastOnline: String!
  records(after: String, first: Int = 10, order: QueryOrder = DESC): PaginatedRecords!
}

enum QueryOrder {
  ASC
  DESC
}

type Record {
  id: Int!
  createdAt: String!
  updatedAt: String!
  level: Int!
  moves: Int!
  time: Int!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
}

type RecordEntityPageEdge {
  cursor: String!
  node: Record!
}

type PaginatedRecords {
  totalCount: Int!
  edges: [RecordEntityPageEdge!]!
  pageInfo: PageInfo!
}

type Message {
  id: ID!
  message: String!
}

type Image {
  id: Int!
  createdAt: String!
  updatedAt: String!
  url: String!
}

type ImageEntityPageEdge {
  cursor: String!
  node: Image!
}

type PaginatedImages {
  totalCount: Int!
  edges: [ImageEntityPageEdge!]!
  pageInfo: PageInfo!
}

type Position {
  row: Int!
  column: Int!
}

type Piece {
  position: Position!
  empty: Boolean!
}

type Game {
  puzzle: [[Piece!]!]!
  status: GameStatus!
  next: Position!
}

enum GameStatus {
  starting
  ongoing
  paused
  completed
  lost
}

type Query {
  me: User!
  getUser(username: String!): User!
  getRecords(input: GetRecordsInput!): PaginatedRecords!
  getImages(after: String, first: Int = 10): PaginatedImages!
  newGame(level: Int!): Game!
}

input GetRecordsInput {
  userId: Int!
  level: Int
  order: QueryOrder = DESC
}

type Mutation {
  updateProfilePicture(picture: Upload!): User!
  testFileUpload(file: Upload!): String!
  addRecord(input: RecordInput!): Record!
  addImage(image: Upload!): Image!
  deleteImage(imageId: Int!): Message!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input RecordInput {
  level: Int!
  moves: Int!
  time: Int!
}